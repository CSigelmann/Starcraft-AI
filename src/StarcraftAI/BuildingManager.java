package StarcraftAI;
import java.io.*;
import java.util.*;

import bwapi.*;
import bwta.*;

/**
 *  BuildingManager Class
 * 	Responsible for managing all the buildings under the agent’s control
 *  
 * @author Kenny Trowbridge
 * @author Casey Sigelmann
 * @author Alex Bowns
 *
 */
public class BuildingManager{
	private String fileName = "genetic_populations.txt";
	private String mapFileName = getMapAndCoords()+".txt";
	
	private Game game;
	private Player self;

	private final boolean IS_TRAINING = false;

	private BWTA bwta;
	private ArrayList<TilePosition> mappedGenesToTilePositions;

	// hash table where key is "map-name" concatenated with the starting base coordinates,
	// value is the population of genes
	private Hashtable<String, Population> populations;
	private Hashtable<String, Integer> generationCount;
	private Population population;
	private Gene gene;
	private HashMap<String, int[]> trainedGenes;

	private ArrayList<Unit> buildingList;

	/**
	 * c'tor
	 * @param game - a reference to the game match
	 * @param self - a reference to our player of the game
	 */
	public BuildingManager(Game game, Player self)
	{
		this.game = game;
		this.self = self;
		this.bwta = new BWTA();
		
		//initialize trained genes
		trainedGenes = new HashMap<String, int[]>();
		trainedGenes.put("(2)Destination.scx_(31,7)", new int[] {1217691871, 194874834, 94841814, 292074468, 353112210, 30899234, 342132152, 463341543, 144704297, 288354224, 774622471, 1405264819, 1030514942, 1584302466, 994069871, 2036898440, 210788247, 1944609842, 1047129895, 1969908986, 182911922, 985472543, 1231350973, 281442174, 1935026139, 1079176011, 763088244, 2141317210, 547608043, 501919758, 407677766, 2061254209, 635672239, 1514480380, 1809497600, 649875079, 95191568, 1131542327, 70070283, 1834996506, 2104039417, 151129871, 1138506347, 1068925080, 1395777425, 1291171268, 739084518, 1609672031, 298045588, 1944052191, 1937827607, 1819365200, 524518138, 852983800, 57553702, 1515714992, 547235530, 871351315, 2014682041, 1796064225, 611927505, 672171089, 1040392926, 1746677716, 499272183, 1059560337, 606497564, 350971776, 1192152845, 1171018542, 1040173909, 1309281301, 488553007, 294507863, 943958814, 969444248, 938547859, 1933944652, 1299523321, 1041301306, 1727844664, 417803246, 1461255378, 595890568, 373162338, 509947244, 188858260, 1711762766, 652822883, 124153897, 1297503317, 788804360, 263569918, 2040679550, 336836058, 1439692662, 1171179204, 1373524254, 1173029141, 112708036, 547260245, 329641328, 268224882, 1499513410, 532831779, 1039475618, 588428599, 725850063, 865726986, 1026507616, 1830314390, 53264040, 1711414626, 81439524, 1421119123, 382340808, 32284550, 1371181988, 801346576, 1131344313, 497390559, 788521233, 613686670, 1733826827, 884454075, 392822180, 1625763429, 148356232, 1266702743, 1834007688, 282357252, 485712088, 1738824500, 179323641, 1121172679, 119284876, 2109118431, 1416624974, 1833766659, 399153234, 1300323859, 171806465, 355439283, 1608981288, 58954119, 2121591064, 607197805, 587711034, 1465031980, 2007908309, 1349964454, 179094987, 1135749649, 933963680, 243809635, 2026141933, 1582473232, 24882454, 1636660922, 2011154001, 1111977531, 2060744443, 2096742510, 1268791115, 1902516917, 1789849831, 233002846, 201884255, 98507683, 560758062, 694783637, 41459780, 109147809, 1154854777, 1219114140, 792619986, 758786477, 1282313848, 1776762535, 1925433010, 1887460017, 817422054, 1637727654, 1300449484, 629100616, 706573594, 493820463, 101479872, 435106366, 1515556773, 366844103, 1149270934, 296587480, 1565342110, 1794975262, 1460697271, 625391130, 77050996, 727280431, 1529236094, 331398515, 1789848213, 192031259, 1929437900, 857306181, 425126311, 1599005053, 2142054323, 1208484327, 815686798, 1992997184, 191125422, 783505398, 1377123861, 274315019, 679016920, 1663986352, 233970355, 1831352822, 85676750, 564867378, 771750602, 748011199, 1415472048, 58027419, 2085412242, 1949035825, 1896247309, 786840898, 162687623, 206760580, 1187646490, 1705079162, 41002101, 19134343, 449753893, 1972219612, 1295688402, 31150943, 1011475915, 1310217815, 51991702, 680159355, 2052050980, 1014379835, 1155549832, 113983755, 1945663462, 380763468, 214600029, 1263944352, 1948545850, 1719239985, 1496146757, 259732252, 172631512, 1908068500, 1865636831, 1520337887, 1976862821, 1346494617, 2058948768, 754706325, 1102870121, 313019308, 2055547959, 1779379472, 438666329, 1476894287, 909402121, 1176790102, 1978097020, 218071837, 1834117018, 1773161036, 571255610, 1874899589, 87626084, 1345453488, 359694944, 1508748350, 896422434, 2139028110, 784554493, 977417794, 274357910, 259678073, 526420170, 353543708, 1213124061, 425228352, 1232948470, 1406398477, 922207110, 145724480, 1079662771, 553484393, 2003837585, 1874272494, 1698752834, 112581382, 1364313740, 1798704769, 1278502351, 64685100, 1161479863, 1371634941, 660702213, 1276620837, 1096859600, 1561112346, 1886648376, 1825979317, 1592469114, 858474437, 1662757382, 436366525, 116236725, 818335234, 472544261, 1923807758, 2147183723, 342390965, 1423141082, 515103692, 728547505, 773341936, 968139230, 1005216697, 596592909, 2108836135, 1232377217, 703339832, 2048564086, 896756799, 1994126812, 1634825732, 140622595, 1700675180, 2121602467, 615329286, 416981724, 658061159, 2010765423, 2073137098, 733271896, 2047291545, 653862680, 401371277, 911737239, 385558820, 1908207263, 1785395371, 2143523028, 1762153192, 580495128, 1656108009, 568878289, 1934583174, 1219518726, 167340419, 1110802564, 1506425819, 306994146, 1615019228, 1102103478, 1790359415, 1856316570, 575837343, 1997843874, 1986129141, 401488737, 1585466477, 2072782702, 1981061311, 1591558780, 76983474, 751130064, 2046941893, 753906609, 1703389648, 1161065363, 288963304, 853090192, 1695739396, 1300214800, 1572664649, 480441075, 1888266412, 808267084, 1241353814, 1831257468, 588654160, 1657522723, 1545318182, 1319907236, 1488531965, 1710245034, 1852918316, 915614073, 1324825586, 1333733351, 604178092, 773058609, 1383943068, 685562624, 1117451603, 1782412545, 1590539859, 616346382, 862817479, 427512633, 2110824646, 241700026, 1179250034, 1829522966, 576472676, 1450602359, 1920363987, 1760712549, 702941702, 1192212300, 863661876, 1829051948, 648891926, 871450449, 1194752343, 904930259, 215028925, 1754219337, 2110496461, 1157978944, 1507944491, 684380845, 2062756270, 837635878, 1335724882, 1322674874, 998739769, 1633537959, 1605366023, 1795235895, 1763683457, 2015373534, 1868103043, 1212285452, 12405430, 567271732, 655986130, 1518107638, 279964380, 1725628357, 328091695, 1637269460, 1424808584, 1433197129, 1909241035, 1989884064, 1077776452, 755788673, 447946072, 1178469550, 197480278, 215429530, 498873773, 1849653032, 897520656, 1482789792, 1023904746, 1229235070, 1769261206, 526766397, 560447714, 1860103756, 680575057, 1351251853, 1181190188, 1268492509, 453672187, 1604935719, 1263956041, 1997845199, 1536145964, 1277179657, 126776141, 1411064859, 728416847, 466848009, 1967345345, 288686024, 1728514641, 1806522886, 1061987320, 1304882737, 1028986326, 645939969, 2071715918, 2053308092, 464430082, 1196955794, 1546579337, 13988474, 1929126733, 1147214051, 1760602618, 1520995987, 1912368666, 1538171521, 387459255, 2063103550, 196070947, 2068476432, 1752676877, 1385172194, 537348643, 1645570171, 122469218, 996663567, 1612265692, 1596119454, 734081000, 1119886726, 238820727, 1096245876, 1886396559, 388924579, 92851327, 422856445, 410895407, 1377399312, 56940421, 1658345758, 720662569, 1782113495, 14041595, 106915299, 741822570, 1456902675, 8485900, 1491676393, 662431612, 1235615538, 290629828, 1756421627, 660297547, 1731044312, 1693657331, 1656626933, 766275775, 198841348, 1011642339, 1222154947, 804752565, 1978938152, 326705105, 2055673759, 385166194, 450063731, 1638231416, 1141052573, 1017666980, 2143615604, 1887423752, 975827019, 1707471933, 625026952, 1106961969, 580163361, 943290436, 1831315980, 843173952, 52345325, 968420487, 1658583267, 2128582297, 877038328, 1853379555, 1849339964, 456852607, 1978533279, 1093534536, 1082194437, 1034402289, 237419525, 1924708605, 878641596, 1466795932, 1708207367, 1759018145, 1754164607, 893850275, 1727570665, 1351305406, 241557809, 1425588811, 351574390, 700348776, 1006798851, 264303206, 1853402120, 1998980578, 197175137, 276984079, 635178108, 1982496757, 1893480617, 665469426, 469860439, 1878973531, 1798474621, 1844554502, 1315497979, 1712259922, 708702291, 1245546723, 286477402, 286795980, 964979272, 1442573016, 2030204300, 1666968668, 2127718924, 1182856859, 1279068427, 2071937381, 616206163, 1896093094, 543174546, 918954032, 32731995, 838756571, 149406606, 1451031858, 676101020, 2009826398, 1383466954, 1971390933, 68334450, 1804432586, 1216603403, 1475886197, 1457434289, 846531241, 1728229558, 1886003447, 1592030152, 78606100, 563641029, 1250586756, 637431343, 1582956461, 373286025, 1697018519, 1103915071, 1509782281, 288652842, 1640375276, 1080004046, 1395737892, 1010085323, 1370630279, 319583860, 1126722335, 725753032, 1294959208, 52180848, 1611157574, 891924233, 1793200726, 439713362, 1661671795, 641466456, 442949776, 1786163943, 2022584719, 1606380321, 1448553515, 1213866435, 1078861436, 1589941910, 386221102, 1386032725, 1798347869, 1898351865, 1751394169, 310611203, 1864237654, 262101356, 44756100, 284132890, 2022371062, 1744449337, 1181020848, 1927822979, 879967242, 445388519, 29350276, 172428332, 1151810350, 171713874, 1846034875, 1164234338, 728512983, 1585723719, 1634096275, 180375901, 982601178, 2062762611, 1108022582, 1404483420, 356084018, 937037503, 1562343400, 1132915704, 448509636, 334209473, 1558594342, 100212189, 471547499, 1723470333, 916567861, 1931690208, 213307648, 1343811343, 166592181, 1273207004, 1911700771, 948842777, 274818772, 1556761316, 750373600, 857386455, 1701011414, 1934293246, 1390477391, 1891833605, 457917662, 1395614460, 763211157, 979534229, 1140321310, 1080299905, 343949695, 225407653, 1211170758, 995624992, 1189766478, 75265671, 574823889, 1011384220, 170189209, 610090657, 1298645002, 200386482, 1242941913, 2063157371, 2091510938, 1312649815, 649588983, 888474227, 1897442918, 1839817921, 1393862075, 1803201402, 272127246, 1413247764, 1688254142, 1804288195, 683900253, 1090904328, 824032988, 476156910, 619503894, 255733144, 474003749, 1922003232, 1047719949, 1849885701, 1031724525, 161381893, 569782157, 1472673629, 293717475, 236820236, 1277387575, 61850493, 2044974889, 371439216, 1281522859, 792123413, 552991084, 1584488933, 2111525982, 1192094478, 1852805586, 511287690, 817965413, 1649922511, 352962418, 1169915239, 720759348, 2121524421, 1613172672, 2029323331, 1479951436, 296953999, 1271399118, 232315271, 1998552230, 1429242073, 405698242, 269437820, 159387797, 337963598, 1974461851, 174846433, 1266949331, 1630584146, 341317503, 1667290124, 1986957047, 1211299701, 1444747425, 332928723, 414194867, 1835503261, 428176660, 1539126063, 1447888148, 145082999, 230800492, 1470018652, 1906481085, 1303881494, 1079660215, 2129755669, 230524338, 417546124, 397570111, 446601941, 814873066, 551501688, 885106230, 799314445, 612792525, 2106285494, 1099192954, 699745950, 1977780498, 82173556, 12896372, 1171872949, 1775379343, 1440161123, 117256414, 1430399065, 1909386199, 1653350569, 1530156497, 1821582198, 1197486084, 1782133200, 1507147767, 1946938519, 155365823, 339575094, 312691089, 1360776236, 1680422299, 1153486797, 2114679727, 168281130, 107404225, 1292116286, 1295253987, 1349264575, 1458847896, 1203664506, 1129012971, 1333963786, 627074060, 1140756418, 1974945944, 1865820976, 1230920374, 1462417190, 65356826, 1965864279, 1841350026, 1222087236, 1318935097, 152130922, 198447758, 1229913417, 1909988320, 562449681, 1764263044, 96463939, 1127804538, 1128847847, 989660142, 1932547655, 1517133622, 1143964832, 1738258050, 1399465775, 802439254, 1875637994, 924409835, 1161574893, 686312758, 2073647504, 570984904, 596138717, 2031621607, 750795469, 1305572458, 213340634, 281244793, 1771633951, 729796136, 642512074, 1799669812, 758500468, 385299626, 242106854, 1745173178, 1935482171, 1100971101, 1869054315, 2042448803, 930984535, 616153368, 1328050266, 1512219888, 155528091, 749682213, 2131915384, 392443778, 94509931, 1204481776, 2120011036, 1005952792, 857384478, 2146367120, 865003586, 4902497, 1417717457, 1207357673, 396925545, 1766130703, 1026318039, 714557905, 1202813217, 1831994888, 235318114, 296566406, 1871197376, 878618181, 46908403, 1779180840, 585824681, 1230868270, 454000770, 2029870318, 2144459483, 272848663, 1923885006, 1304512201, 1599357993, 590929307, 157599132, 1384326605, 1752331519, 1038413507, 161745099});
		trainedGenes.put("(2)Destination.scx_(64,118)", new int[] {549261398, 541997302, 308068240, 1388798001, 2057860091, 2009340360, 803424933, 926301943, 2064737453, 1211031508, 131524087, 2047366426, 170450408, 1338939652, 2052103416, 128923814, 1476925231, 1379750284, 2147358699, 812329699, 1710958267, 711073751, 491528484, 1710925916, 1193650896, 346126390, 1266922537, 1393803438, 381320520, 816564856, 1621267235, 1092106245, 1344236684, 1701536957, 1859675585, 2106945094, 125173493, 1085448338, 1756454640, 843124663, 1998732281, 527128332, 253193124, 1732480223, 1896382235, 1646828797, 1249044614, 817978290, 5984773, 756795024, 273932524, 1437859531, 1794264821, 831370526, 1529664627, 256103938, 1195575940, 1109223833, 29885753, 1425258302, 104138321, 2049237541, 1749044879, 51334576, 506047258, 197475740, 342262635, 99435206, 1991330521, 1463494671, 597447623, 364261022, 1250306935, 1094487829, 2018360206, 1937854255, 1871091790, 1430298104, 827455669, 28838378, 1384578428, 464716233, 496830724, 2127639274, 1995770077, 724792867, 1657450937, 445980178, 1885656367, 1596102835, 1965820903, 322663997, 373365821, 1155335704, 1277205513, 13885026, 536309937, 1009106363, 1839460292, 1921669579, 1780056316, 1986055739, 1623139, 41450394, 1527537789, 1935624655, 159036665, 164913099, 939449113, 1369277003, 1597993001, 678325078, 956288690, 1123323242, 173045625, 1603195829, 1294830927, 903876882, 111567974, 291762263, 1175930843, 1184454587, 1311684499, 1263686076, 193560582, 1382591595, 180694626, 1519886993, 119440093, 313392959, 455713223, 1204899670, 688646708, 1950470511, 1257991144, 1998059282, 1036396546, 1928292748, 904091331, 1333830442, 1177753682, 401166369, 1244992081, 1978976272, 574921428, 1429803872, 1064383258, 1416760584, 536098201, 1464554463, 422623092, 1474485501, 1723383768, 148445362, 1998788417, 65060348, 1101992708, 1821338424, 2129123639, 886141459, 2026817104, 452344906, 481079514, 636477314, 1000599503, 574066567, 731456873, 301056229, 371650416, 948432962, 1328594999, 169549140, 40583487, 688991633, 1660207684, 1756399715, 1744721644, 509632008, 1705927432, 282667846, 1005550274, 1819815149, 703239713, 2132907043, 2056894957, 1070099934, 1565547101, 49303273, 1583928871, 493615293, 614108990, 1381844267, 82985039, 1814941418, 438195121, 117237436, 635116274, 1291224791, 1894181889, 1934629222, 354698203, 1549992000, 1452290173, 631894570, 76900070, 241524891, 1781039932, 1450980439, 1444943931, 804345682, 1048792705, 1830525521, 1395914266, 970238509, 1652886367, 925689359, 1125962653, 50137345, 1376898974, 1678489805, 614722180, 126626538, 2120704952, 1318859762, 1028462119, 1698378102, 1288429961, 488136886, 1118377110, 1554929004, 2124012238, 1066033324, 408277503, 444193650, 1842546320, 1522820656, 2003155565, 1102663530, 1703049246, 919041031, 1376195528, 758778221, 492264658, 1420420704, 1751408784, 458881459, 67191425, 1630454442, 1238813146, 2077998276, 200730200, 1314836416, 1738772870, 1578170369, 443582925, 2006218394, 1822264522, 148635076, 142528979, 1351313919, 1059300886, 355056009, 1514614043, 1092949695, 1763010415, 1990517800, 1754186150, 1957879121, 460754180, 897810503, 886891535, 213323705, 563781318, 930061976, 10359994, 1412283297, 1506906961, 1420585386, 63997622, 1099840076, 799963559, 431520507, 1206070701, 1255573473, 505490437, 2093905461, 932205711, 1209099556, 1841039739, 2042949167, 1687993183, 1575501390, 899594340, 1978568976, 1485061574, 720493558, 463401278, 12295240, 2101149946, 932109194, 1785221029, 2096994600, 1197091427, 1900343080, 1382821443, 2043568349, 1257708966, 1202316861, 211453808, 20670551, 1223967432, 1376746720, 469557367, 1710642593, 170808500, 977335675, 359414570, 543939413, 175716136, 29587406, 582684947, 381803698, 88560992, 338311662, 1758221503, 979229249, 1778812931, 2049929267, 238058555, 951363139, 375096221, 1717765445, 1510052791, 340025431, 1887751715, 1029708523, 1087854451, 1438235189, 474889864, 681202194, 936138292, 610370494, 152961552, 871619238, 1269635867, 2015854381, 2143562358, 1802325103, 1149919287, 1048804823, 584434859, 1734362810, 201804034, 919978860, 75265793, 852875564, 517776413, 2043917129, 147040039, 2024387478, 136983982, 314950648, 1133258863, 1766530679, 1062144517, 1215806377, 1567584853, 1410120426, 1059180398, 786183406, 1257987747, 2081688448, 1333934225, 1501850096, 1171222455, 1108984774, 1079797464, 170740132, 2135203366, 1363927271, 1062689846, 2109920185, 1885909105, 381848056, 2139584064, 89832625, 2067142515, 1746450430, 480112560, 1741117997, 1158764032, 1591322181, 2033085123, 461625244, 1253371591, 328469288, 1371767776, 1071296921, 701815367, 209983357, 1553689428, 1464302336, 2095219979, 1625636538, 268797862, 607447305, 1769625249, 1125959773, 259661983, 743974670, 706985746, 1494099729, 1235554391, 1309307647, 1747766621, 50993549, 2143059460, 2116158015, 713706913, 1860801121, 1084006588, 871050547, 1925541876, 369453197, 1480689886, 1006822186, 1495266810, 165400541, 1314386547, 569599993, 355985642, 1012176968, 1287528497, 462706381, 1620302058, 1035286428, 686668996, 1615785796, 77636160, 997562439, 1365755348, 428321158, 768195584, 1615246084, 173768076, 546181661, 1232408199, 247197108, 853632354, 160689853, 1154175167, 1294484649, 1044594739, 172796499, 1985343495, 442514016, 585768071, 502663454, 1419476142, 1211207732, 984311477, 1605051658, 1476632945, 1635894737, 1850606420, 1862447701, 107716942, 254042701, 138440989, 1377405646, 720657800, 1603929112, 815330203, 726303550, 615703675, 1258895590, 1587070261, 1072989894, 51152686, 1172446904, 2047562089, 953154496, 1453815862, 834521844, 2029680469, 863268791, 838398276, 2099936256, 2085671766, 802130734, 1285153363, 1211469989, 1210257891, 460214026, 413869849, 1822705710, 1920551306, 932812691, 1504855383, 1441549097, 1167154523, 1449585072, 1886892985, 639433624, 414410409, 1845397079, 395290462, 973769957, 1288775730, 1215809387, 945187447, 942400577, 675907393, 567067611, 1346976419, 1924940102, 2135494432, 1418083196, 314879732, 114404759, 1818262104, 1222691803, 189900300, 1194931488, 1460290827, 827091962, 13221079, 722069313, 603474013, 977744063, 968641566, 620731922, 757226211, 850680294, 110948258, 2043580166, 95353986, 1425057022, 509907880, 1623237387, 401541081, 1074063894, 1718487919, 1930270492, 1506110513, 1534591225, 779562894, 729736182, 636743871, 1331751901, 1037009921, 2031120097, 1055260283, 1836731646, 1188914927, 744423909, 431124855, 1595417049, 1916978640, 1356172188, 1311601821, 654362674, 856317136, 1336551239, 1795384084, 88754686, 2036759733, 198962800, 1928704606, 243069197, 564811937, 2072153959, 1920132409, 1314661593, 692510007, 467709661, 1793230121, 433491215, 1135873503, 2060062412, 1126049157, 1119780551, 1565518807, 1896775808, 45116650, 856404128, 1918624739, 247110453, 1469261853, 210188000, 1549911327, 589249744, 1145398168, 1155712963, 1483292289, 934335240, 1446153856, 1432110978, 210167269, 1173318202, 1787012342, 2016320793, 997049755, 1705543287, 1368613189, 355519996, 550269717, 704889814, 257849154, 1780769427, 559852739, 1626029639, 157865555, 710152885, 230457681, 1770046044, 682685165, 1145289049, 789576821, 1534117074, 1349130757, 861049187, 821714449, 1108616062, 139905614, 1045477817, 1007802527, 997305658, 1539053274, 1126760679, 947967610, 1548775945, 872878515, 853539530, 946850149, 1336662998, 1616723296, 675896149, 1979875285, 1090162181, 158402541, 250911614, 550634383, 1037635147, 51596353, 519169363, 1793851313, 1556690037, 1125834160, 87050460, 1568714616, 467100427, 1062934665, 1733703493, 2038977469, 320243571, 310541814, 219498484, 147403211, 1141105181, 165303549, 1478116451, 1204230510, 235107, 604001678, 1457159344, 960852829, 356975613, 315841182, 631202606, 2414313, 713942495, 15473642, 2085712295, 210053395, 1867725551, 756740275, 916673799, 1026900509, 118945538, 1686346259, 1465803106, 1318657046, 1536522754, 2114983074, 2125549257, 206539035, 1256050924, 940798858, 109198573, 989884771, 1935129987, 991281642, 1994719244, 333224432, 820676444, 182578647, 1207350417, 1937240690, 865440481, 1494137338, 1837079468, 164064083, 1894499085, 2052831334, 1943814082, 1764447381, 251830376, 844844179, 80666602, 1183794053, 1216760395, 520271174, 2113545515, 348684639, 784543212, 1205411742, 1508253169, 1635516767, 395741188, 849264726, 126911128, 2046090893, 1918282767, 1634006755, 1806254529, 1651794720, 803476720, 1144027000, 700208299, 312776139, 1597258947, 1918794924, 2057951999, 905334846, 415710729, 1847984836, 1089306503, 1590943024, 1352219419, 1185810707, 978723902, 800137038, 658542141, 592567458, 569300536, 1965178530, 1477034696, 483158655, 1274677955, 138534791, 1795314917, 1193515378, 1090528012, 282058859, 1594046881, 1900850489, 470956025, 1653710904, 283914045, 1705160630, 1937911599, 966577331, 979424702, 1617421298, 1517360927, 89503926, 2071498467, 2141929444, 347392824, 1107966491, 2146576030, 571141979, 1706418132, 355602541, 1906066193, 2146229525, 1980159664, 2021511924, 247700718, 1155941947, 580230103, 1006462692, 1687683015, 220943336, 595085434, 130481685, 1519981125, 1828699566, 1467363449, 1235721262, 1832642186, 239170433, 613299775, 595994162, 723145156, 2051428520, 1155229258, 2067920841, 1092423099, 1415959808, 39378152, 1022755387, 523345787, 463988824, 1394995446, 883519997, 3999954, 3253176, 2064361690, 479649114, 1696350259, 1932076080, 1311012523, 424868538, 1537437840, 1441359095, 1806122208, 1564204674, 934085197, 259989917, 1190566326, 280609320, 896101080, 1434959935, 406158282, 1694126411, 1363199298, 531317777, 1421999789, 1659863259, 2058826378, 185222984, 454528711, 410709245, 618987931, 1696136573, 213472701, 969850671, 406036401, 729824729, 1676013169, 623713524, 1311789261, 146642294, 703947235, 1934564821, 157659011, 861626799, 1315072694, 1591494965, 1213003185, 398062084, 2107638171, 1367055703, 596118610, 1518514936, 2046571042, 1294409026, 481649707, 201219959, 1609643578, 881518289, 1548653968, 1386691491, 711318231, 626577716, 1512229181, 1701861250, 2055089224, 731484941, 1830676444, 1683675210, 431843808, 220492036, 1143837414, 2014464792, 1683637098, 1216770907, 1395975345, 526974723, 1153850283, 583148782, 1277163671, 867002406, 680138359, 1131469014, 1296579375, 1928431782, 1505078090, 1726904618, 58360453, 1232954243, 1867023164, 442031315, 386920180, 566589290, 303029105, 1162585636, 1487573622, 878592014, 580760231, 2036443381, 1128718663, 663076962, 1612250479, 396679304, 242412205, 1207703073, 113779015, 1479917238, 882661468, 1124340333, 2018949669, 546535655, 2122725159, 193256737, 1593288215, 1494040536, 1444382554, 2053480085, 1604606358, 436630591, 1473483949, 1146892787, 1457159070, 366360073, 1399658195, 227008432, 1180224097, 338395922, 688200015, 894509005, 159139675, 671013818, 835103819, 1797743465, 419343095, 20607656, 665869372, 919988196, 502735303, 1466032811, 1232892527, 1565036797, 1327386705, 1789029501, 1152974178, 1824115220, 309763811, 2094316852, 1094754585, 1096970662, 546950861, 1813593408, 1046818452, 2112146299, 1846334894, 1154999726, 1262290208, 1087076743, 1780154880, 822910682, 10762775, 1385529356, 836331507, 518596256, 77760707, 501763643, 689149072, 1358266021, 1141312404, 2107691408, 33721063, 1173873309, 2016066358, 1251774307, 399443980, 118310519, 2078980001, 355715064, 520097544, 1853578339, 1678465128, 477994876, 303480180, 1642406876, 1146422380});
		
		File f = new File(fileName);
		if(f.exists())
		{
			loadFromFile();
		}
		else
		{
			this.populations = new Hashtable<String, Population>();
		}
		this.generationCount = new Hashtable<String, Integer>();
		this.buildingList = new ArrayList<Unit>();
		mapTiles();
		this.gene = selectGene();
	}

	/**
	 * addUnit
	 * Adds a given unit the list of buildings if it does not already exist.
	 * 
	 * @param unit - unit to add to the list
	 */
	public void addUnit(Unit unit)
	{
		buildingList.add(unit);
	}

	/**
	 * build
	 * Builds a unit of the given type with the builder unit
	 * 
	 * @param buildingType - unit type to build
	 * @param builder - unit used to build
	 */
	public void build(UnitType buildingType, Unit builder)
	{ 
		TilePosition placement = getPlacement(buildingType, builder);
		if(placement != null)
		{
			builder.build(placement, buildingType);
		}
	}
	
	//TODO comments
	private void mapTiles()
	{
		mappedGenesToTilePositions = new ArrayList<TilePosition>();
		// loop through tile positions
		TilePosition base = self.getStartLocation();
		bwta.Region baseRegion = BWTA.getRegion(base); 
		
		int x = 0, y = 0; 
		TilePosition searchTile = new TilePosition(x, y);
	
		while(searchTile.isValid())
		{
			while(searchTile.isValid())
			{
				//map a gene index to a tile position
				if (BWTA.getRegion(searchTile) == baseRegion)
				{
					mappedGenesToTilePositions.add(searchTile);
				}
				x += 1;
				searchTile = new TilePosition(x, y);
			}
			x = 0; 
			y += 1; 
			searchTile = new TilePosition(x, y);
		}
	}

	/**
	 * getPlacement()
	 * Finds the best location to place a given type of building
	 * 
	 * @param buildingType - type of building to be placed
	 * @return TilePosition - returns the location to place the building
	 */
	private TilePosition getPlacement(UnitType buildingType, Unit builder)
	{
		
		// build a refinery at the nearest geyser location to the starting point
		if(buildingType == UnitType.Terran_Refinery)
		{
			List<Unit> geysers = game.getGeysers();
			Unit closest = null;
			Position position = BWTA.getStartLocation(self).getPosition();
			for(Unit geyser : geysers)
			{
				if(game.canBuildHere(builder, geyser.getTilePosition(), buildingType, true))
				{
					if(closest == null)
					{
						closest = geyser;
					}
				}
			}
			return closest.getTilePosition();
		}

		// use gene to build any other building type
		int highestIdx = gene.getHighestIdx();
		if (highestIdx == -1)
		{
			return null; 
		}
		TilePosition tp =  mappedGenesToTilePositions.get(highestIdx);
		ArrayList<Integer> reactivateList = new ArrayList<Integer>();
		boolean buildingFound = false; 
		//pick new highest index if we can't build at the tileposition
		while(!(game.canBuildHere(builder, tp, buildingType, true))){
			//if a building is in the tile position, deactivate the index
			List<Unit> tileUnit = game.getUnitsOnTile(tp.getX(), tp.getY());
			buildingFound = false;
			for (Unit unit : tileUnit)
			{
				if (unit.getType().isBuilding())
				{
					//deactivate
					buildingFound = true; 
					break;
				}
			}
			// implied some non building is in the space, reactivate the index for later consideration
			// TODO tps might be reactivated if no units were on that tile but it still can't be built on
			if (buildingFound == false)
			{
				reactivateList.add(highestIdx);
			}
			gene.deactivateIndex(highestIdx);
		 
			
			highestIdx = gene.getHighestIdx();
			if (highestIdx == -1)
			{
				return null; 
			}
			tp = mappedGenesToTilePositions.get(highestIdx);
		}
		
		// now reactivate all indexes that had non building units occupying tile position
		for (int idx : reactivateList)
		{
			gene.reactivateIndex(idx);
		}
						
		
		return mappedGenesToTilePositions.get(highestIdx);
		
		
		

		//		// values to help determine the search radius of where to build different constructs
		//		int maxDist = 8;
		//		int changeRate = 2;
		//		int stopDist = 40;
		//		TilePosition aroundTile = self.getStartLocation();
		//
		//		// build a refinery at the nearest geyser location to the starting point
		//		if(buildingType == UnitType.Terran_Refinery)
		//		{
		//			List<Unit> geysers = game.getGeysers();
		//			Unit closest = null;
		//			Position position = BWTA.getStartLocation(self).getPosition();
		//			for(Unit geyser : geysers)
		//			{
		//				if(game.canBuildHere(builder, geyser.getTilePosition(), buildingType, true))
		//				{
		//					if(closest == null || geyser.getDistance(position) < geyser.getDistance(position))
		//					{
		//						closest = geyser;
		//					}
		//				}
		//			}
		//			return closest.getTilePosition();
		//		}
		//
		//		// search for a an empty tile position that can build a given building type
		//		while((maxDist < stopDist))
		//		{
		//			int minX = aroundTile.getX()-maxDist;
		//			int maxX = aroundTile.getX()+maxDist;
		//			int minY = aroundTile.getY()-maxDist;
		//			int maxY = aroundTile.getY()+maxDist;
		//			// loop through the defined area
		//			for(int i = minX; i <= maxX; i++)
		//			{
		//				for(int j = minY; j <= maxY; j++)
		//				{
		//					if(i < maxX && i > minX && j < maxY && j > minY)
		//					{
		//						continue;
		//					}
		//					if(game.canBuildHere(builder, new TilePosition(i,j), buildingType, true))
		//					{
		//						return new TilePosition(i,j);
		//					}
		//				}
		//			}
		//			// we didn't find a valid tile, so increase max distance
		//			maxDist+=changeRate;
		//		}
		//		game.printf("Unable to find suitable build position for "+buildingType.toString());
		//		return null;
	}

	/**
	 * update()
	 * This updates the building list in order to prune dead units
	 */
	public void update()
	{
		ArrayList<Unit> buildingsToRemove = new ArrayList<Unit>();
		for(Unit building : buildingList)
		{
			if (!building.exists())
			{
				buildingsToRemove.add(building);
			}
		}
		for(Unit building : buildingsToRemove)
		{
			buildingList.remove(building);
		}
	}

	/**
	 * checkBuildings()
	 * Checks the buildings list and returns a list of buildings that are 
	 * damaged or incomplete
	 * 
	 * @return - list of damaged or incomplete buildings
	 */
	public List checkBuildings()
	{
		return null;
	}

	/**
	 * getBuilding()
	 * Finds a building of the given building type
	 * 
	 * @param building - type of building to find
	 * @param checkTraining - true if only a building that is not training should be returned
	 * @return - building
	 */
	public Unit getBuilding(UnitType buildingType, boolean checkTraining)
	{
		for(Unit building : buildingList)
		{
			if(building.getType() == buildingType)
			{
				if((!checkTraining) || (!building.isTraining()))
				{
					return building;
				}
			}
		}
		return null;
	}

	/*
	 * productionBuildingCount()
	 * counts the number of team buildings that are either barracks or command centers
	 * 
	 * @return the total count
	 */
	public int productionBuildingCount()
	{
		int count = 0;
		for (Unit building : buildingList)
		{
			if(building.getType() == UnitType.Terran_Barracks 
					|| building.getType() == UnitType.Terran_Command_Center)
			{
				count++;
			}
		}

		return count;
	}

	/*
	 * mateGenes() 
	 * Mate two genes and return two children
	 * 
	 * @param gene1 - the first parent gene
	 * @param gene2 - the second parent gene
	 * @return children - two child genes of the parents
	 */
	public Gene[] mateGenes(Gene gene1, Gene gene2)
	{
		Gene[] children = new Gene[2];
		int geneSize = gene1.getSize();

		// split the genes at random index, combine opposite halves
		int idx = (int)(Math.random() * geneSize); 
		ArrayList<Integer> kid1 = new ArrayList<Integer>();
		ArrayList<Integer> kid2 = new ArrayList<Integer>();

		kid1.addAll(gene1.getRange(0, idx));
		kid1.addAll(gene2.getRange(idx, geneSize));
		kid2.addAll(gene2.getRange(0, idx));
		kid2.addAll(gene1.getRange(idx, geneSize));

		children[0].setListValues(kid1);
		children[1].setListValues(kid2);

		// possibly mutate an allele of either gene
		children[0].mutateAllele();
		children[1].mutateAllele();

		return children;
	}
	
	private Gene selectGenesToMate()
	{
		double combinedFitness = 0.0;
		double[] evalArr = new double[Population.POPULATION_SIZE];
		
		for (int i = 0; i < Population.POPULATION_SIZE; i++)
		{
			combinedFitness += population.getGene(i).getFitness();
			evalArr[i] = combinedFitness;
		}
		double randVal = Math.random() * combinedFitness;
		for (int i = 0; i < Population.POPULATION_SIZE; i++)
		{
			if (randVal < evalArr[i])
			{
				return population.getGene(i);
			}
		}
		return population.getGene(Population.POPULATION_SIZE-1);
	}


	/**
	 * selectGene()
	 * Select the specific gene per map. 
	 * 
	 * @return The gene that we should use for this game
	 */
	private Gene selectGene()
	{
		Gene geneToUse = null;
		String key = getMapAndCoords();
		System.out.println("Key: " + key);
		if(IS_TRAINING)
		{
			if(populations.containsKey(key))
			{
				population = populations.get(key);
				
			}
			else
			{
				population = new Population(mappedGenesToTilePositions.size(), 0);
				populations.put(key, population);
				generationCount.put(key, 0);
			}
			//grab the next gene up
			geneToUse = population.getNextGene();

		}
		else
		{
			System.out.println(trainedGenes);
			int[] geneArray = trainedGenes.get(key);
			ArrayList<Integer> geneList = new ArrayList<Integer>();
			for(int i : geneArray)
			{
				geneList.add(i);
			}
			geneToUse = new Gene(geneArray.length);
			geneToUse.setListValues(geneList);
		}
		
		geneToUse.printGene();

		return geneToUse; 
	}

	/**
	 * getMapAndCoords()
	 * Gets the map name and coordinates of our base and concatenates them together.
	 * 
	 * @return String - the map name and coordinates
	 */
	private String getMapAndCoords()
	{
		TilePosition base = self.getStartLocation();
		String coords = "(" + base.getX() + "," + base.getY() + ")";
		return game.mapFileName() + "_" + coords;
	}

	/**
	 * saveToFile()
	 * saves the hashtable of populations to a variable filename
	 */
	public void saveToFile()
	{
		FileOutputStream fos;
		ObjectOutputStream oos;
		
		try 
		{
			fos = new FileOutputStream(mapFileName);
			oos = new ObjectOutputStream(fos);
			oos.writeObject(populations);
			oos.close();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
			return; 
		}
	}
	
	/*
	 * loadFromFile()
	 * loads the data from 'filename' into the populations Hashtable
	 */
	public void loadFromFile()
	{
		try 
		{
			FileInputStream fis = new FileInputStream(mapFileName);
			ObjectInputStream ois = new ObjectInputStream(fis);
			populations = (Hashtable<String, Population>) ois.readObject();
		}
		catch (IOException | ClassNotFoundException e) 
		{
			e.printStackTrace();
			return;
		} 
	}
	
	public void onEnd(boolean isWinner, long elapsedTime)
	{
		gene.reset();
		if(IS_TRAINING)
		{
			gene.updateFitness(isWinner, elapsedTime);
			if (population.allGenesAnalyzed())
			{
				population.printPopulation();
				Population tempPopulation = new Population(mappedGenesToTilePositions.size(), population.getGenerationCount()+1);
				for (int i = 0; i < Population.POPULATION_SIZE; i+=2)
				{
					Gene g1 = selectGenesToMate();
					Gene g2 = selectGenesToMate();
					Gene[] matedGenes = mateGenes(g1, g2);
					tempPopulation.setGene(i, matedGenes[0]);
					tempPopulation.setGene(i+1, matedGenes[1]);
				}	
				population = tempPopulation; 
			}
			saveToFile();
		}
	}
	

}
